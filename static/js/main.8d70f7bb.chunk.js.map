{"version":3,"sources":["component/Card.js","component/Cardlist.js","component/SearchBox.js","component/Scroll.js","component/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","Cardlist","robots","map","user","i","key","SearchBox","searchfeild","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","errror","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","ErrorBoundry","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAaeA,EAZH,SAACC,GACT,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA2BH,EAAMI,GAAjC,OACrB,6BACI,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCeXC,EAlBA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAIhB,OACI,6BACGA,EAAOC,KAAI,SAACC,EAAKC,GACpB,OACA,kBAAC,EAAD,CAAMC,IAAKD,EACVP,GAAII,EAAOG,GAAGP,GACbC,KAAMG,EAAOG,GAAGN,KAChBC,MAAOE,EAAOG,GAAGL,aCCTO,EAXC,SAAC,GAAkC,EAA9BC,YAA+B,IAAjBC,EAAgB,EAAhBA,aAC/B,OACE,yBAAKd,UAAU,OACjB,2BAAOA,UAAU,mCACjBe,KAAK,SACJC,YAAY,gBACZC,SAAUH,MCDAI,EARD,SAACnB,GACf,OACI,yBAAKoB,MAAO,CAACC,UAAW,SAASC,OAAO,kBAAkBC,OAAO,UAC5DvB,EAAMwB,WCaAC,E,kDAhBV,WAAYzB,GAAO,IAAD,8BACd,cAAMA,IACG0B,MAAM,CACRC,UAAS,GAHF,E,8DAOJC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAGpB,OAAGG,KAAKJ,MAAMC,SACX,sDACDG,KAAK9B,MAAMwB,a,GAdOQ,aC6CdC,G,wDArCX,aAAc,IAAD,8BAAE,gBAcfC,eAAe,SAACC,GACf,EAAKJ,SAAS,CAACjB,YAAYqB,EAAMC,OAAOC,SAdrC,EAAKX,MAAM,CACPlB,OAAO,GACPM,YAAY,IAHP,E,gEAOG,IAAD,OACfwB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKX,SAAS,CAACvB,OAAOkC,S,+BAO7B,IAAD,EACuBZ,KAAKJ,MAAzBlB,EADH,EACGA,OAAOM,EADV,EACUA,YACN6B,EAAenC,EAAOoC,QAAO,SAAApC,GAC/B,OAAOA,EAAOH,KAAKwC,cAAcC,SAAShC,EAAY+B,kBAC/D,OAAmB,IAAhBrC,EAAOuC,OACD,uCAIN,yBAAK9C,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWc,aAAce,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAACc,EAAD,KACF,kBAAC,EAAD,CAAUxC,OAAQmC,W,GAhCRX,c,MCIEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACR,kBAAC,EAAD,MACCC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8d70f7bb.chunk.js","sourcesContent":["import React from 'react';\r\nconst Card =(props)=>{\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src= {`https://robohash.org/${props.id}?`} ></img>\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default Card","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst Cardlist=({robots})=>{\r\n// if(true){\r\n//   throw new Error('NOOOOO!');\r\n// }\r\n return (\r\n     <div>\r\n       {robots.map((user,i)=>{\r\n     return  (\r\n     <Card key={i}\r\n      id={robots[i].id}\r\n       name={robots[i].name} \r\n       email={robots[i].email}/>\r\n          );\r\n        })}\r\n     </div>\r\n );\r\n \r\n}\r\nexport default Cardlist;","import React from 'react';\r\n// import Cardlist from './Cardlist';\r\n// import SearchBox from './SearchBox';\r\n// import {robots }from './robots';\r\n\r\nconst SearchBox=(  { searchfeild , searchChange})=>{\r\n    return(\r\n      <div className='pa2'>\r\n    <input className='pa3 ba b--green bg-lightest-blue' \r\n    type='search'\r\n     placeholder='search robots'\r\n     onChange={searchChange}\r\n     />\r\n\r\n     </div>);\r\n} \r\nexport default SearchBox; ","import React from 'react';\r\n\r\nconst Scroll= (props)=>{\r\nreturn(\r\n    <div style={{overflowY: 'scroll',border:'2px solid black',height:'800px' }}>\r\n        {props.children}\r\n    </div>\r\n);\r\n};\r\n\r\nexport default Scroll;","import React , { Component } from 'react';\r\n class ErrorBoundary extends Component{\r\n     constructor(props){\r\n         super(props);\r\n             this.state={\r\n                hasError:false\r\n            }\r\n         }\r\n\r\n componentDidCatch(errror,info){\r\n     this.setState({hasError:true})\r\n }        \r\n \r\nrender(){if(this.state.hasError)\r\n    {return <h1>Oooops.that's not good</h1>}\r\n    return this.props.children\r\n}\r\n}\r\nexport default ErrorBoundary","import React,{Component} from 'react';\r\nimport Cardlist from '../component/Cardlist';\r\nimport SearchBox from '../component/SearchBox';\r\nimport Scroll from '../component/Scroll';\r\nimport ErrorBoundry from '../component/ErrorBoundry';\r\nimport {robots }from '../robots';\r\nimport './App.css'\r\n\r\nclass App extends Component{\r\n    constructor(){ super()\r\n        this.state={\r\n            robots:[],\r\n            searchfeild:''\r\n        }\r\n    }\r\n\r\ncomponentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=>response.json())\r\n    .then(users=>this.setState({robots:users}))\r\n\r\n}\r\n\r\n    onSearchChange=(event)=>{\r\n     this.setState({searchfeild:event.target.value})\r\n    }\r\n render(){\r\n     const {robots,searchfeild}=this.state;\r\n       const filteredRobots=robots.filter(robots=>{\r\n           return robots.name.toLowerCase().includes(searchfeild.toLowerCase())  ;     })\r\n  if(robots.length===0){\r\n    return <h1>LOADING</h1>\r\n  }\r\nelse\r\n   { return(\r\n     <div className='tc'>  \r\n      <h1 className='f1'>RoboFriends</h1>\r\n      <SearchBox searchChange={this.onSearchChange}/>\r\n      <Scroll>\r\n          <ErrorBoundry>\r\n        <Cardlist robots={filteredRobots}/>\r\n        </ErrorBoundry>\r\n        </Scroll>\r\n        </div> \r\n    );}}\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n//import Card from './Card';\n//import Cardlist from './Cardlist';\n//import {robots }from './robots';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n <App/>,\n  document.getElementById('root')\n); \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with som  pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}